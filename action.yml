name: Test WordPress language files
description: >-
  Check internationalization files for WordPress plugins for being up-to-date.
author: holyhope
branding:
  icon: globe
  color: blue
inputs:
  slug:
    description: Plugin or theme slug.
    required: true
  source:
    description: Directory to scan for string extraction.
    required: false
    default: '.'
  pot_file:
    description: |-
      Path to an existing POT file to use for updating.

      Default: `{source}/{slug}.pot`
    required: false
  po_path:
    description: |-
      PO files to update or a directory containing multiple PO files.

      Type: multi-line string

      Default: all PO files in the source directory
      with the same prefix as the POT file.
    required: false
  languages_directory:
    description: Path to the languages directory
    required: false
    default: languages
  ignored_patterns:
    description: |-
      Pattern to ignore when checking the POT file changes.

      Type: multi-line string
    required: false
    default: |-
      # Copyright (C)
      "POT-Creation-Date:
      X-Generator:
  domain:
    description: |-
      Text domain to look for in the source code,
      unless the `ignore-domain` option is `true`.

      Default: the "Text Domain" header of the plugin or theme is used.
    required: false
  ignore_domain:
    description: |-
      Ignore the text domain completely and
      extract strings with any text domain.
    required: false
    default: 'false'
  skip_js:
    description: |-
      Skips JavaScript string extraction.
      Useful when this is done in another build step, e.g. through Babel.
    required: false
    default: 'false'
  skip_php:
    description: Skips PHP string extraction.
    required: false
    default: 'false'
  skip_blade:
    description: Skips Blade-PHP string extraction.
    required: false
    default: 'false'
  skip_block_json:
    description: Skips string extraction from block.json files.
    required: false
    default: 'false'
  skip_theme_json:
    description: Skips string extraction from theme.json files.
    required: false
    default: 'false'
  skip_audit:
    description: |-
      Skips string audit where it tries
      to find possible mistakes in translatable strings.
    required: false
    default: 'true'
  exclude:
    description: |-
      List of files and paths that should be skipped for string extraction.

      Simple glob patterns can be used, i.e. `foo-*.php` excludes any PHP file
      with the `foo-` prefix.
      Leading and trailing slashes are ignored,
      i.e. `/my/directory/` is the same as `my/directory`.
      The following files
      and folders are always excluded:
      node_modules, .git, .svn, .CVS, .hg, vendor, *.min.js.

      Type: multi-line string
      Default: None
    required: false
  include:
    description: >-
      List of files and paths that
      should be used for string extraction.

      If provided, only these files and folders
      will be taken into account for string extraction.

      Simple glob patterns can be used, i.e. `foo-*.php` includes any PHP file
      with the `foo-` prefix.
      Leading and trailing slashes are ignored,
      i.e. `/my/directory/` is the same as `my/directory`.

      Type: multi-line string
      Default: None
    required: false
  location:
    description: >-
      Whether to write `#: filename:line` lines.

      Note that disabling this option makes it harder for technically
      skilled translators to understand each messageâ€™s context.
    required: false
    default: 'true'
  headers:
    description: >-
      Array in JSON format of custom headers
      which will be added to the POT file.
    required: false
  file_comment:
    description: >-
      String that should be added as a comment to the top of
      the resulting POT file.
    required: false
  package_name:
    description: >-
      Name to use for package name in the resulting
      POT file's `Project-Id-Version` header.

      Overrides plugin or theme name, if applicable.
    required: false
  fail_on_diff:
    description: >-
      Whether to fail the build if there are differences in the POT file.
    required: false
    default: 'true'
  fail_on_warning:
    description: Whether to fail the build if there are warnings.
    required: false
    default: 'true'
  wp_cli_path:
    description: >-
      Path to the WP-CLI binary.

      To use a custom version of WP-CLI, see the [`install-wp-cli`
      GitHub action](https://github.com/marketplace/actions/install-wp-cli)

      Default: Downloaded from the official WP-CLI website.
    required: false

outputs:
  patch_path:
    description: Path to the patch file containing the changes to apply.
    value: ${{ steps.diff.outputs.patch_path }}
  warnings_path:
    description: Path to the file containing warnings.
    value: ${{ steps.build.outputs.warnings_path }}

runs:
  using: composite
  steps:
    - name: Check POT file
      shell: bash
      id: pot_file
      run: |-
        test -f "$LANG_FILE" \
        || ( \
          echo "::error file=$LANG_FILE::The POT file is missing" ; \
          exit 1 \
        )

        echo "path=$LANG_FILE" >> "$GITHUB_OUTPUT"
      env:
        LANG_FILE: >-
          ${{ inputs.pot_file &&
            inputs.pot_file ||
            format(
              '{0}/{1}.pot',
              inputs.languages_directory,
              inputs.slug
            )
          }}
    - name: Check PO files
      id: po_files
      shell: bash
      run: >-
        ${{ inputs.po_path &&
          format( 'echo {0}', inputs.po_path ) ||
          'find "$(dirname "${LANG_FILE}")" \
            -mindepth 1 -maxdepth 1 \
            -name "$(basename "${LANG_FILE%.pot}")-*.po"'
        }} | while IFS= read -r PO_FILE; do
          test -f "$PO_FILE" || (
            echo "::error file=$PO_FILE::The PO file is missing" ;
            exit 1
          ) ;
          PO_LANG="$(basename "$PO_FILE")"
          PO_LANG="${PO_LANG#$(basename "${LANG_FILE%.pot}")-}"
          PO_LANG="${PO_LANG%.po}"
          echo "$PO_LANG=$PO_FILE" >> "$GITHUB_OUTPUT" ;
        done
      env:
        LANG_FILE: ${{ steps.pot_file.outputs.path }}

    - uses: holyhope/install-wp-cli-github-action@v1.0.0
      id: wp_cli
      if: ${{ ! inputs.wp_cli_path }}

    - name: Build POT file
      id: build
      shell: bash
      run: |-
        WARNINGS="$(mktemp --tmpdir='${{ runner.temp }}' 'XXXXXX.log')"

        export XDEBUG_MODE=off

        '${{ inputs.wp_cli_path
          && inputs.wp_cli_path
          || steps.wp_cli.outputs.path
        }}' i18n make-pot \
          '${{ inputs.source }}' \
          '${{ steps.pot_file.outputs.path }}' \
          '--slug=${{ inputs.slug }}' \
          $( \
            test -z '${{ inputs.include }}' \
            || echo "--include=$( \
              echo '${{ inputs.include }}' \
              | tr '\n' ',' \
              | sed 's/,,*/,/' \
              | sed 's/^,//' \
              | sed 's/,$//' \
              | sed 's/ *, */,/g'\
            )" \
          ) \
          $( \
            test -z '${{ inputs.exclude }}' \
            || echo "--exclude=$( \
              echo '${{ inputs.exclude }}' \
              | tr '\n' ',' \
              | sed 's/,,*/,/' \
              | sed 's/^,//' \
              | sed 's/,$//' \
              | sed 's/ *, */,/g'\
            )" \
          ) \
          ${{ inputs.domain &&
            format( '--domain={0}', inputs.domain ) || '' }} \
          ${{ ! inputs.ignore_domain && '--ignore-domain' || '' }} \
          ${{ ! inputs.skip_audit && '--skip-audit' || '' }} \
          ${{ ! inputs.skip_js && '--skip-js' || '' }} \
          ${{ ! inputs.skip_php && '--skip-php' || '' }} \
          ${{ ! inputs.skip_blade && '--skip-blade' || '' }} \
          ${{ ! inputs.skip_block_json && '--skip-block-json' || '' }} \
          ${{ ! inputs.skip_theme_json && '--skip-theme-json' || '' }} \
          ${{ inputs.location && '--location' || '--no-location' }} \
          ${{ inputs.headers &&
            format( '--headers={0}', inputs.headers ) || '' }} \
          ${{ inputs.file_comment &&
            format( '--file-comment={0}', inputs.file_comment ) || '' }} \
          ${{ inputs.package_name &&
            format( '--package-name={0}', inputs.package_name ) }} \
          2> "$WARNINGS"

        echo "warnings_path=$WARNINGS" >> "$GITHUB_OUTPUT"
        echo "warnings=$(wc -l "$WARNINGS" | cut -d ' ' -f 1)" \
          >> "$GITHUB_OUTPUT"

    - name: Update PO files
      shell: bash
      run: >-
        '${{ inputs.wp_cli_path
          && inputs.wp_cli_path
          || steps.wp_cli.outputs.path
        }}' \
          i18n \
          update-po \
          '${{ steps.pot_file.outputs.path }}'

    - name: Install diff tool
      id: diff_tool
      shell: bash
      run: |-
        DIFFTOOL="$(mktemp --tmpdir='${{ runner.temp }}' 'XXXXXX.patch')"

        cat <<EOF > "$DIFFTOOL"
        #!/usr/bin/env bash

        set -euo pipefail

        diff $(echo '${{ inputs.ignored_patterns }}' | \
          while IFS= read -r IGNORED_PATTERN; do
            test -z "$IGNORED_PATTERN" \
            || echo -n "--ignore-matching-lines='$IGNORED_PATTERN' "
          done)"\$@"
        EOF

        chmod +x "$DIFFTOOL"
        echo "path=$DIFFTOOL" >> "$GITHUB_OUTPUT"

    - name: Compute the diff
      id: diff
      shell: bash
      run: |-
        git add --intent-to-add -- \
          '${{ steps.pot_file.outputs.path }}' \
          ${{ join( steps.po_files.outputs.*, ' ' ) }}

        if [[ ! $( \
            git diff --exit-code -- '${{ steps.pot_file.outputs.path }}' \
        ) ]] ; then
          echo -n '::error '
          echo -n 'file=${{ steps.pot_file.outputs.path }},'
          echo -n 'title=The POT-Creation-Date header must be updated'
          echo '::No changes'
          exit 1
        fi

        PATCH_FILE="$(mktemp --tmpdir='${{ runner.temp }}')"

        git diff \
          --patch \
          --output="$PATCH_FILE" \
          -- \
          '${{ steps.pot_file.outputs.path }}' \
          ${{ join( steps.po_files.outputs.*, ' ') }}

        echo "patch_path=$PATCH_FILE" >> "$GITHUB_OUTPUT"

    - name: Adds warnings to the summary
      if: ${{ steps.build.outputs.warnings > 0 }}
      shell: bash
      run: >-
        echo '# Warnings' >> "$GITHUB_STEP_SUMMARY" ;
        echo '' >> "$GITHUB_STEP_SUMMARY" ;
        echo '```' >> "$GITHUB_STEP_SUMMARY" ;
        cat '${{ steps.build.outputs.warnings_path }}' \
          >> "$GITHUB_STEP_SUMMARY" ;
        echo '```' >> "$GITHUB_STEP_SUMMARY" ;
        echo '' >> "$GITHUB_STEP_SUMMARY" ;

    - name: Adds diff to the summary
      shell: bash
      run: |-
        echo '# Changes' >> "$GITHUB_STEP_SUMMARY"
        echo '' >> "$GITHUB_STEP_SUMMARY"

        echo '```' >> "$GITHUB_STEP_SUMMARY"
        git diff --stat -- '${{ steps.pot_file.outputs.path }}' \
          | head -n 1 \
          >> "$GITHUB_STEP_SUMMARY"
        echo '```' >> "$GITHUB_STEP_SUMMARY"
        echo '' >> "$GITHUB_STEP_SUMMARY"

        cat <<EOF >> "$GITHUB_STEP_SUMMARY"
        | Language | File | Diff |
        |----------|------|------|
        EOF

        PO_FILE_PREFIX="$(basename '${{ steps.pot_file.outputs.path }}')"
        PO_FILE_PREFIX="${PO_FILE_PREFIX%.pot}-"
        for PO_FILE in ${{ join( steps.po_files.outputs.*, ' ') }} ; do
          PO_LANG="$(basename "$PO_FILE")"
          PO_LANG="${PO_LANG#$PO_FILE_PREFIX}"
          PO_LANG="${PO_LANG%.po}"

          echo -n '| `'      >> "$GITHUB_STEP_SUMMARY"
          echo -n "$PO_LANG" >> "$GITHUB_STEP_SUMMARY"
          echo -n '` | `'    >> "$GITHUB_STEP_SUMMARY"
          echo -n "$PO_FILE" >> "$GITHUB_STEP_SUMMARY"
          echo -n '` | `'    >> "$GITHUB_STEP_SUMMARY"
          (
            git diff --exit-code --stat \
              --stat-name-width=1 \
              --stat-graph-width=50 \
              -- "$PO_FILE" \
            && echo '       0' \
          ) | head -n 1 \
            | tail -c +8 \
            | head -c -1 \
            >> "$GITHUB_STEP_SUMMARY"
          echo '` |' >> "$GITHUB_STEP_SUMMARY"
        done
        echo '' >> "$GITHUB_STEP_SUMMARY"

        echo '```' >> "$GITHUB_STEP_SUMMARY"
        git diff --shortstat -- \
          '${{ steps.pot_file.outputs.path }}' \
          ${{ join( steps.po_files.outputs.*, ' ') }} \
          >> "$GITHUB_STEP_SUMMARY"
        echo '```' >> "$GITHUB_STEP_SUMMARY"
        echo '' >> "$GITHUB_STEP_SUMMARY"

    - name: Exit due to warnings
      if: ${{ steps.build.outputs.warnings > 0 && inputs.fail_on_warning }}
      shell: bash
      run: >-
        echo "::group::Show warnings: ${{
          steps.build.outputs.warnings_path }}" ;
        cat "${{ steps.build.outputs.warnings_path }}" ;
        echo "::endgroup::" ;
        exit 1

    - name: Exit on due to diff
      if: ${{ inputs.fail_on_diff }}
      shell: bash
      run: >-
        git difftool \
          --no-prompt \
          --trust-exit-code \
          --extcmd '${{ steps.diff_tool.outputs.path }}' \
          -- \
            '${{ steps.pot_file.outputs.path }}' \
            ${{ join( steps.po_files.outputs.*, ' ') }} \
        > /dev/null \
        || ( \
          echo '::group::Show diffs: ${{ steps.diff.outputs.patch_path }}' ; \
          cat '${{ steps.diff.outputs.patch_path }}' ; \
          echo '::endgroup::' ; \
          exit 1
        )
