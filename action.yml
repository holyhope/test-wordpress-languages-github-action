name: Test WordPress language files
description: Check language files for WordPress plugins for being up-to-date.
author: holyhope
branding:
  icon: 'globe'
  color: 'blue'
inputs:
  plugin_slug:
    description: Plugin or theme slug.
    required: true
  source:
    description: Directory to scan for string extraction.
    required: false
    default: '.'
  pot_file:
    description: >-
      Path to an existing POT file to use for updating.

      If not provided, the default
      `{source}/{plugin_slug}.pot` is used.
    required: false
    default: ''
  po_path:
    description: |-
      PO file to update or a directory containing multiple PO files.
      Defaults to all PO files in the source directory.
    required: false
    default: ''
  languages_directory:
    description: Path to the languages directory
    required: false
    default: languages
  ignored_pattern:
    description: Pattern to ignore when checking the POT file changes.
    required: false
    default: '"POT-Creation-Date: '
  domain:
    description: >-
      Text domain to look for in the source code,
      unless the `--ignore-domain` option is used.

      By default, the "Text Domain" header of the plugin or theme is used.

      If none is provided, it falls back to the project slug.
    required: false
  ignore_domain:
    description: >-
      Ignore the text domain completely and
      extract strings with any text domain.
    required: false
    default: false
  skip_js:
    description: >-
      Skips JavaScript string extraction.
      Useful when this is done in another build step, e.g. through Babel.
    required: false
    default: false
  skip_php:
    description: Skips PHP string extraction.
    required: false
    default: false
  skip_blade:
    description: Skips Blade-PHP string extraction.
    required: false
    default: false
  skip_block_json:
    description: Skips string extraction from block.json files.
    required: false
    default: false
  skip_theme_json:
    description: Skips string extraction from theme.json files.
    required: false
    default: false
  skip_audit:
    description: >-
      Skips string audit where it tries
      to find possible mistakes in translatable strings.
    required: false
    default: true
  exclude:
    description: >-
      Comma-separated list of files and paths that
      should be skipped for string extraction.

      For example, `--exclude=.github,myfile.php` would ignore any strings
      found within `myfile.php` or the `.github` folder. Simple glob patterns
      can be used, i.e. `--exclude=foo-*.php` excludes any PHP file
      with the `foo-` prefix. Leading and trailing slashes are ignored,
      i.e. `/my/directory/` is the same as `my/directory`. The following files
      and folders are always excluded:
      node_modules, .git, .svn, .CVS, .hg, vendor, *.min.js.
    required: false
    default: ''
  include:
    description: >-
      Comma-separated list of files and paths that
      should be used for string extraction.

      If provided, only these files and folders
      will be taken into account for string extraction.

      For example, `--include="src,my-file.php` will ignore anything
      besides `my-file.php` and files in the `src` directory. Simple glob
      patterns can be used, i.e. `--include=foo-*.php` includes any PHP file
      with the `foo-` prefix. Leading and trailing slashes are ignored,
      i.e. `/my/directory/` is the same as `my/directory`.
    required: false
  location:
    description: >-
      Whether to write `#: filename:line` lines.

      Note that disabling this option makes it harder for technically
      skilled translators to understand each messageâ€™s context.
    required: false
    default: true
  headers:
    description: >-
      Array in JSON format of custom headers
      which will be added to the POT file.
    required: false
    default: ''
  file_comment:
    description: >-
      String that should be added as a comment to the top of
      the resulting POT file.
    required: false
    default: ''
  package_name:
    description: >-
      Name to use for package name in the resulting
      POT file's `Project-Id-Version` header.

      Overrides plugin or theme name, if applicable.
    required: false
    default: ''
outputs:
  patch_path:
    description: Path to the patch file.
    value: ${{ steps.diff.outputs.patch_path }}
runs:
  using: composite
  steps:
    - name: Check POT file
      shell: bash
      run: |-
        test -f "$LANG_FILE" \
        || ( \
          echo "::error file=$LANG_FILE::The POT file is missing" ; \
          exit 1 \
        )
      env:
        LANG_FILE: >-
          ${{ inputs.pot_file &&
            inputs.pot_file ||
            format(
              '{0}/{1}.pot',
              inputs.languages_directory,
              inputs.plugin_slug
            )
          }}
    - uses: godaddy-wordpress/setup-wp-cli@1

    - name: Build POT file
      shell: bash
      run: >-
        wp i18n make-pot '${{ inputs.source }}' "$LANG_FILE" \
          '--slug=${{ inputs.plugin_slug }}' \
          ${{ inputs.include &&
            format( '--include={0}', inputs.include ) || '' }} \
          ${{ inputs.exclude &&
            format( '--exclude={0}', inputs.exclude ) || '' }} \
          ${{ inputs.domain &&
            format( '--domain={0}', inputs.domain ) || '' }} \
          ${{ ! inputs.ignore_domain && '--ignore-domain' || '' }} \
          ${{ ! inputs.skip_audit && '--skip-audit' || '' }} \
          ${{ ! inputs.skip_js && '--skip-js' || '' }} \
          ${{ ! inputs.skip_php && '--skip-php' || '' }} \
          ${{ ! inputs.skip_blade && '--skip-blade' || '' }} \
          ${{ ! inputs.skip_block_json && '--skip-block-json' || '' }} \
          ${{ ! inputs.skip_theme_json && '--skip-theme-json' || '' }} \
          '${{ inputs.location && '--location' || '--no-location' }}' \
          ${{ inputs.headers &&
            format( '--headers={0}', inputs.headers ) || '' }} \
          ${{ inputs.file_comment &&
            format( '--file-comment={0}', inputs.file_comment ) || '' }} \
          ${{ inputs.package_name &&
            format( '--package-name={0}', inputs.package_name ) }}
      env:
        LANG_FILE: >-
          ${{ inputs.pot_file &&
            inputs.pot_file ||
            format(
              '{0}/{1}.pot',
              inputs.languages_directory,
              inputs.plugin_slug
            )
          }}

    - name: Update PO files
      shell: bash
      run: wp i18n update-po "$LANG_FILE"
      env:
        LANG_FILE: >-
          ${{ inputs.pot_file &&
            inputs.pot_file ||
            format(
              '{0}/{1}.pot',
              inputs.languages_directory,
              inputs.plugin_slug
            )
          }}

    - name: Install diff tool
      id: diff_tool
      shell: bash
      run: |-
        DIFFTOOL="$(mktemp --tmpdir='${{ runner.temp }}')"

        cat <<EOF > "$DIFFTOOL"
        #!/usr/bin/env bash

        set -euo pipefail

        diff --ignore-matching-lines='$IGNORED_PATTERN' "\$@"
        EOF

        chmod +x "$DIFFTOOL"
        echo "path=$DIFFTOOL" >> "$GITHUB_OUTPUT"
      env:
        IGNORED_PATTERN: ${{ inputs.ignored_pattern }}

    - name: Compute the diff
      id: diff
      shell: bash
      run: |-
        git add --intent-to-add -- "$LANG_FILE" ${{ inputs.po_path }}

        if [[ ! $( \
            git diff --exit-code -- "$LANG_FILE" \
        ) ]] ; then
          LINE_NUMBER="$( \
            awk '/${{ inputs.ignored_pattern }}/ {print FNR}' "$LANG_FILE" \
          )"
          START_COLUMN="$(echo -n '${{ inputs.ignored_pattern }}' | wc -c)"
          echo -n '::error '
          echo -n "file=$LANG_FILE,"
          echo -n "col=$START_COLUMN,"
          echo -n "line=$LINE_NUMBER,"
          echo -n 'title=The POT-Creation-Date header must be updated'
          echo '::No changes'
          exit 1
        fi

        PATCH_FILE="$(mktemp --tmpdir='${{ runner.temp }}')"

        git diff \
          --patch \
          --output="$PATCH_FILE" \
          -- '${{ inputs.languages_directory }}'

        echo "patch_path=$PATCH_FILE" >> "$GITHUB_OUTPUT"

        git diff --stat -- "$LANG_FILE"
      env:
        LANG_FILE: >-
          ${{ inputs.pot_file &&
            inputs.pot_file ||
            format(
              '{0}/{1}.pot',
              inputs.languages_directory,
              inputs.plugin_slug
            )
          }}

    - name: Diff
      shell: bash
      run: |-
        test -z "$( \
          git difftool \
            --no-prompt \
            --extcmd '${{ steps.diff_tool.outputs.path }}' \
            -- '${{ inputs.languages_directory }}' \
          || echo "Command failed" \
        )" \
          || ( \
            echo '::group::Show diff' ; \
            cat '${{ steps.diff.outputs.patch_path }}' ; \
            echo '::endgroup::' ; \
            exit 1 ; \
          )
